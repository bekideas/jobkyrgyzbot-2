from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from services.db import user_has_anketa  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–Ω–∫–µ—Ç—ã

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–∫–µ
@router.message(CommandStart())
async def start_handler(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ –≤ –ë–î
    exists = await user_has_anketa(message.from_user.id)

    if exists:
        await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞.\n\n–ö–æ–º–∞–Ω–¥–∞: /–º–æ—è–∞–Ω–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –°–æ–∏—Å–∫–∞—Ç–µ–ª—å", callback_data="role_seeker")],
        [InlineKeyboardButton(text="üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="role_employer")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JobKyrgyz Bot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å" –∏–ª–∏ "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"
@router.callback_query(F.data.in_({"role_seeker", "role_employer"}))
async def role_selected(callback: CallbackQuery):
    role = "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å" if callback.data == "role_seeker" else "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role}\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")

    # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ FSM (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    if callback.data == "role_seeker":
        from handlers.seeker import start_seeker_fsm
        await start_seeker_fsm(callback.message)
    else:
        from handlers.employer import start_employer_fsm
        await start_employer_fsm(callback.message)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö: —É–¥–∞–ª–µ–Ω–∏–µ + –ª–∏—á–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π
@router.message(F.chat.type.in_({"group", "supergroup"}))
async def group_message_handler(message: Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    try:
        await message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîó –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                url=f"https://t.me/{(await message.bot.me()).username}"
            )]
        ])
        await message.bot.send_message(
            chat_id=message.from_user.id,
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=kb
        )
    except Exception:
        pass
